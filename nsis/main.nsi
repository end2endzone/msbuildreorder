; Script generated by the HM NIS Edit Script Wizard.

; Include release version information
!include "..\version_info.nsh"

; Include Modern UI, logic statements, file functions and EIT support
!include "MUI2.nsh"
!include "x64.nsh"
!include "LogicLib.nsh"

!include "${PLATFORM_INCLUDE}"

; HM NIS Edit Wizard helper defines
!define PRODUCT_MAIN_EXE_NAME "msbuildreorder.exe"
!define PRODUCT_NAME "msbuildreorder"
!define PRODUCT_PUBLISHER "end2endzone.com"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\${PRODUCT_MAIN_EXE_NAME}"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

; MUI 1.67 compatible ------
!include "MUI.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Language Selection Dialog Settings
!define MUI_LANGDLL_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
!define MUI_LANGDLL_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_LANGDLL_REGISTRY_VALUENAME "NSIS:Language"

; Installer pages
!insertmacro MUI_PAGE_WELCOME          #Welcome page
!insertmacro MUI_PAGE_LICENSE       "..\LICENSE"
!insertmacro MUI_PAGE_DIRECTORY        #Directory page
!insertmacro MUI_PAGE_INSTFILES        #Instfiles page
#Finish page
#!define MUI_FINISHPAGE_NOAUTOCLOSE
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "French"

; MUI end ------
RequestExecutionLevel admin #configure UAC to force Vista & Window 7 to require admin privilege
Name "${PRODUCT_NAME} v${PRODUCT_VERSION}"
OutFile ".\bin\${PRODUCT_NAME} v${PRODUCT_VERSION} ${PRODUCT_PLATFORM} setup.exe"
InstallDir "${PROGRAMFILES_PLATFORM}\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

Function .onInit
  !insertmacro MUI_LANGDLL_DISPLAY
  
  # call userInfo plugin to get user info.  The plugin puts the result in the stack
  userInfo::getAccountType
  # pop the result from the stack into $0
  pop $0
  # compare the result with the string "Admin" to see if the user is admin.
  # If match, jump 3 lines down.
  strCmp $0 "Admin" +3
  # if there is not a match, print message and return
  MessageBox MB_ICONSTOP|MB_OK "You must have administrator privilege to install $(^Name)."
  Abort
  # otherwise, confirm and return
  ;messageBox MB_OK "is admin"
FunctionEnd

# default section start
Section #"Full install" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite on
  File "..\msvc\${PRODUCT_PLATFORM}\Release\${PRODUCT_MAIN_EXE_NAME}"
  File "..\msvc\${PRODUCT_PLATFORM}\Release\msbuildreorder_unittest.exe"
  File /r "..\msvc\${PRODUCT_PLATFORM}\Release\test_files"
  File "..\AUTHORS"
  File "..\CHANGES"
  File "..\LICENSE"
  File "..\README.md"  
  
  CreateDirectory "$SMPROGRAMS\${PRODUCT_NAME}"
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk" "$INSTDIR\${PRODUCT_MAIN_EXE_NAME}"
SectionEnd

Section -AdditionalIcons
  CreateShortCut "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall.lnk" "$INSTDIR\uninst.exe"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\${PRODUCT_MAIN_EXE_NAME}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\${PRODUCT_MAIN_EXE_NAME}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
SectionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  !insertmacro MUI_UNGETLANGUAGE
  
  # call userInfo plugin to get user info.  The plugin puts the result in the stack
  userInfo::getAccountType
  # pop the result from the stack into $0
  pop $0
  # compare the result with the string "Admin" to see if the user is admin.
  # If match, jump 3 lines down.
  strCmp $0 "Admin" +3
  # if there is not a match, print message and return
  MessageBox MB_ICONSTOP|MB_OK "You must have administrator priviledge to uninstall $(^Name)."
  Abort
  # otherwise, confirm and return
  ;messageBox MB_OK "is admin"

  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Abort
  
FunctionEnd

Section Uninstall

  Delete "$INSTDIR\uninst.exe"
  
  Delete "$INSTDIR\${PRODUCT_MAIN_EXE_NAME}"
  Delete "$INSTDIR\msbuildreorder_unittest.exe"
  Delete "$INSTDIR\AUTHORS"
  Delete "$INSTDIR\CHANGES"
  Delete "$INSTDIR\LICENSE"
  Delete "$INSTDIR\README.md"
  
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\Uninstall.lnk"
  Delete "$SMPROGRAMS\${PRODUCT_NAME}\${PRODUCT_NAME}.lnk"

  RMDir "$SMPROGRAMS\${PRODUCT_NAME}"
  RMDir "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  SetAutoClose true
SectionEnd
